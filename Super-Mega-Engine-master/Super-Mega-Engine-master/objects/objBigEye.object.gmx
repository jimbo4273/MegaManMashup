<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigEyeRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code (all optional):
//col = &lt;number&gt; (0 = red (default); 1 = blue; 2 = red with orange eyes)

//NOTE: Big Eye actually telegraphs if he's going to do a low or high jump in this game
//If he's going to do a high jump, his eye will close
//If he's going to do a low jump, his eye will stay open

event_inherited();

image_xscale = -1;

healthpointsStart = 20;
healthpoints = healthpointsStart;
contactDamage = 10;


damage[objMetalBlade] = 2;

damage[objPharaohShot] = 4;
damage[objPharaohShotCharging] = 10;
damage[objPharaohShotCharged] = 10;

damage[objStarCrash] = 7;

damage[objSilverTomahawk] = 4;

damage[objWindStorm] = 4;

//Enemy specific code
col = 0; //0 = red; 1 = blue; 2 = red with orange eyes

moveTimer = 0;
xspeed = 0;
yspeed = 0;
repeatAmount = 0;
repeatIsHigh = true;
ground = true;
image_speed = 0;
image_index = 0;
prevGround = true;


alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the correct color
switch col
{
    case 0: sprite_index = sprBigEyeRed; break;
    case 1: sprite_index = sprBigEyeBlue; break;
    case 2: sprite_index = sprBigEyeOrange; break;
    default: sprite_index = sprBigEyeRed; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen and !dead {
    checkGround();
    gravityCheckGround();
    generalCollision();
    
    if ground {
        moveTimer += update_rate;
        if floor(moveTimer) == 1 {
            moveTimer = 2;
            if repeatAmount &lt; 2 {
                randomize();
                highJump = choose(true, false); //False means a low jump, true means a high jump
            }
            else {
                highJump = !repeatIsHigh;
            }
            
            if prevGround == false
                playSFX(sfxBigEye);
            
            image_index = 4;
                
            //To not make the Big Eye spam one jump height by pure randomness
            //Because if he spams low jumps, it's nearly impossible to pass him
            if highJump  and repeatIsHigh
                repeatAmount++;
            else if !highJump and !repeatIsHigh
                repeatAmount++;
            else {
                repeatAmount = 1;
                repeatIsHigh = highJump;
            }
                
            if instance_exists(prtPlayer) {
                if x &gt; prtPlayer.x
                    image_xscale = -1;
                else
                    image_xscale = 1;
            }
            
            xspeed = 0;
            yspeed = 0;
        }
        else if floor(moveTimer) == 4 {
            moveTimer = 5;
            image_index = 0;
        }
        else if floor(moveTimer) == 6 {
            moveTimer = 7;
            if highJump
                image_index = 1;
            else
                image_index = 0;
        }
        else if floor(moveTimer) == 40 {
            if highJump {
                yspeed = -6;
                xspeed = image_xscale * 1;
                image_index = 3;
            }
            else {
                yspeed = -3;
                xspeed = image_xscale * 1;
                image_index = 2;
            }
            
            moveTimer = 0;
        }
    }
        
    prevGround = ground;
    
    escapeWall();
}
else {
    if dead {
        moveTimer = 0;
        image_index = 2;
        repeatAmount = 0;
        repeatIsHigh = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,32</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
