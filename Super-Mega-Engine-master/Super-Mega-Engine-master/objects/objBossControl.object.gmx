<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Place this object at the topleft corner of the screen your boss is in!
//This handles the boss health bar, as well as locking the player and boss movement at the start

//Creation code:
//music = "Music\Boss.ogg" (just the file name of the music you're using for the boss)
//musicVolume = 0-1 (the volume of the music; optional)
//musicLoopPointStart = 0-1 (the starting loop point of the music; optional)
//musicLoopPointEnd = 0-1 (the ending of the loop of the music; if musicLoopPointStart is used, this one is required)
//healthBarPrimaryCol = [col] (the color of the left/right of the boss's health bar)
//healthBarSecondaryCol = [col] (the color of the middle of the boss's health bar)
    
healthBarPrimaryCol = make_color_rgb(255, 160, 68); //Orange
    
healthBarSecondaryCol = c_white;
    
drawHealthBar = false;
canFillHealthBar = true;
fillingHealthBar = false;
healthBarTimer = 0;
healthBarTimerMax = 100;

canInitDeactivation = true;

myBoss = instance_nearest(x, y, prtBoss);
global.bossHealth = 0;


musicVolume = -1;
musicLoopPointStart = -1;
musicLoopPointEnd = -1;

music = bgmBoss;
musicVolume = 0.7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(prtPlayer) &amp;&amp; prtPlayer.visible &amp;&amp; x &gt;= view_xview[0] &amp;&amp; x &lt;= view_xview[0]+view_wview[0]-1
&amp;&amp; y &gt;= view_yview[0] &amp;&amp; y &lt;= view_yview[0]+view_hview[0]-1
{
    //Locks the player and activates the boss (but won't make the boss move yet, it just performs its starting pose)
    //Also plays the boss music
    if canInitDeactivation == true
    {
        canInitDeactivation = false;
        playerLockMovement();
        
        myBoss.startIntro = true;
        
        if musicVolume != -1 &amp;&amp; musicLoopPointStart != -1
            playMusicVolumeLoopPoint(music, musicVolume, musicLoopPointStart, musicLoopPointEnd);
        else if musicVolume != -1
            playMusicVolume(music, musicVolume);
        else if musicLoopPointStart != -1
            playMusicLoopPoint(music, musicLoopPointStart, musicLoopPointEnd);
        else
            playMusic(music);            
    }
    
    
    //Preparing to fill the health bar
    if canFillHealthBar == true
    {
        healthBarTimer += 1;
        if healthBarTimer &gt;= healthBarTimerMax
        {
            healthBarTimer = 0;
            canFillHealthBar = false;
            fillingHealthBar = true;
            stopSFX(sfxEnergyRestore);
            loopSFX(sfxEnergyRestore);
            drawHealthBar = true;
            
        }
    }
    
    
    //Filling the health bar
    if fillingHealthBar == true
    {
        healthBarTimer += 1;
        if healthBarTimer &gt;= 3
        {
            global.bossHealth += 1;
            healthBarTimer = 0;
        }
        
        if global.bossHealth &gt;= 28
        {
            global.bossHealth = 28;
            stopSFX(sfxEnergyRestore);
            playerFreeMovement();
            myBoss.startFight = true;
            myBoss.healthpoints = 28;
            fillingHealthBar = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if drawHealthBar == true
{
    draw_sprite(sprHealthbarBackground, 0, view_xview[0]+7+8+5+16, view_yview[0]+17);
    
    for(i = 1; i &lt;= global.bossHealth; i += 1)
    {
        draw_sprite_ext(sprHealthbarPrimary, 0, view_xview[0]+7+8+1+5+16, view_yview[0]+17+(sprite_get_height(sprHealthbarBackground)-i*2), 1, 1, 0, healthBarPrimaryCol, 1);
        draw_sprite_ext(sprHealthbarSecondary, 0, view_xview[0]+7+8+1+5+16, view_yview[0]+17+(sprite_get_height(sprHealthbarBackground)-i*2), 1, 1, 0, healthBarSecondaryCol, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
