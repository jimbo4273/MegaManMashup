<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time_to_flash1 = room_speed * 7 + 12;
flash1_duration = 12;
time_to_flash2 = 12;
flash2_duration = 12;
time_to_tint = 1;
time_to_map = 24;
time_to_start = 60;

alarm[0] = time_to_flash1;
playMusicNoLoop(bgmFortress);

global.checkpoint = false;
global.levelStart = true;

//Code to run the first time the fortress is loaded
if !global.fortressStarted {
    global.fortressLevels[0] = rmFortressStage;
    global.fortressLevels[1] = rmBossRush;
    global.fortressLevels[2] = rmFinalStage;
    
    global.numFortressLevels = array_length_1d(global.fortressLevels);
    global.currentFortressLevel = 0;
    
    for (var i = 0; i &lt; global.numFortressLevels; i++) {
        global.fortressLevelDone[i] = false;
    }
}

alarm[11] = 1;


global.fortressStarted = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Paths

var drawer;

currentObj = instance_find(objFortressPointStart, 0);

for (var i = 0; i &lt; global.numFortressLevels; i++) {
    origin = currentObj;
    x = 0;
    y = 0;
    
    drawer[i] = instance_create(currentObj.x, currentObj.y, objMapDrawer);
    do {
        deltaX = 0;
        deltaY = 0;
        do {
            switch currentObj.dir {
                case "right": deltaX = 16; break;
                case "left": deltaX = -16; break;
                case "down": deltaY = 16; break;
                case "up": deltaY = -16; break;
            }
            oldX = x;
            oldY = y;
            x += deltaX;
            y += deltaY;
            
            if origin.x + x &gt; room_width || origin.y + y &gt; room_height || origin.x + x &lt; 0 || origin.y + y &lt; 0 {
                exit;
            }
        
            var line = makeLine(oldX, oldY, x, y);
            ds_list_add(drawer[i].lines, line);
            next = instance_position(origin.x + x, origin.y + y, objFortressSpot);
        } until (next &gt; -1);
        currentObj = next;
    } until (currentObj.object_index == objFortressPoint);

    drawer[i].place_icon = currentObj.sprite_index;
    drawer[i].hidden = currentObj.hidden;
    if i != global.currentFortressLevel {
        drawer[i].draw_speed = 0;
    }
    if global.fortressLevelDone[i] {
        drawer[i].step = ds_list_size(drawer[i].lines);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to level
var ID = instance_create(0, 0, objFadeout);
ID.type = "room";
ID.myRoom = global.fortressLevels[global.currentFortressLevel];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Map
instance_activate_object(objMapDrawer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tint Background
alarm[5] = time_to_map;
background_blend[0] = c_blue;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interval before tint
alarm[4] = time_to_tint;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Second Flash
alarm[3] = flash2_duration;
playSFX(sfxThunder);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interval before second flash
alarm[2] = time_to_flash2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// First Flash
alarm[1] = flash1_duration;
playSFX(sfxThunder);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[1] &gt; 0 &amp;&amp; floor(alarm[1] / 2) % 2 == 0) || (alarm[3] &gt; 0 &amp;&amp; floor(alarm[3] / 2) % 2 == 0) {
    background_colour = c_white;
}
else {
    background_colour = c_black;
}

if alarm[6] == -1 &amp;&amp; instance_exists(objMapDrawer) {
    alarm[6] = time_to_start;
    with objMapDrawer {
        if draw_speed &gt; 0 &amp;&amp; step &lt; ds_list_size(lines) {
            other.alarm[6] = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if background_blend[0] == c_blue {
    background_visible[0] = false;
    shader_set(shBlueish);
    draw_background(bgFortress, 0, 0);
    shader_reset();
}
else {
    background_visible[0] = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
