<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHornetChaser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

spd = 2;

xspeed = spd;

img_speed = 30 / room_speed;

passThrough = true;

target = -1;    //Current target being chased
item = -1;  //Current item being carried
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if target &lt; 0 and item &lt; 0 and !place_meeting(x, y, objItemExplosion) {    //Choose target

    image_xscale *= 2;
    image_yscale *= 2;
    target = instance_place(x, y, prtPickup);   //If touching an item
    image_xscale /= 2;
    image_yscale /= 2;

    //Find an enemy
    if target &lt; 0 {
        var n = 1;
        while target &lt; 0 or target.dead or !insideViewObj(target) or !target.targetable {
            if n &gt; instance_number(prtEnemy) {
                target = -1;
                break;
            }
            target = instance_nth_nearest(x, y, prtEnemy, n);
            n++;
        }
    }
    //If no enemy target found, find an item
    var n = 1;
    while target &lt; 0 or !insideViewObj(target) or !target.targetable {
        if n &gt; instance_number(prtPickup) {
            target = -1;
            break;
        }
        target = instance_nth_nearest(x, y, prtPickup, n);
        n++;
    }
}

if target &gt; -1 {    //Chasing
    if instance_exists(target) {
        var dx = sprite_get_xcenter_object(target) - x;
        var dy = sprite_get_ycenter_object(target) - y;
        var len = sqrt(dx*dx + dy*dy);
        xspeed = dx * spd / len;
        yspeed = dy * spd / len;
    }
    else {
        target = -1;
    }
    if (object_get_parent(target.object_index) == prtPickup or object_get_parent(object_get_parent(target.object_index)) == prtPickup) and place_meeting(x, y, target) {
        item = target;
        target = -1;
    }
    else if (object_get_parent(target.object_index) == prtEnemy or object_get_parent(object_get_parent(target.object_index)) == prtEnemy or object_get_parent(object_get_parent(object_get_parent(object_get_parent(target.object_index)))) == prtEnemy) and target.dead {
        target = -1;
    }
}

if target &lt; 0 and item &gt; -1 {   //Bringing item
    if instance_exists(item) {
        if instance_exists(prtPlayer) {
            var dx = sprite_get_xcenter_object(prtPlayer) - x;
            var dy = sprite_get_ycenter_object(prtPlayer) - y;
            var len = sqrt(dx*dx + dy*dy);
            xspeed = dx * spd / len;
            yspeed = dy * spd / len;
        }
        item.x = x + sprite_get_xoffset(item);
        item.y = y + sprite_get_yoffset(item) - (8 - item.sprite_height / 2);
        if image_xscale == -1 {
            item.x -= item.sprite_width;
            if item.sprite_width &gt; 8 {
                item.x += (8 - item.sprite_width / 2);
            }
        }
        else if item.sprite_width &lt;= 8 {
            item.x -= item.sprite_width / 2 + 2;
        }
        item.yspeed = 0;
        item.xspeed = 0;
        with item alarm[0] = 0;
    }
    else {
        item = -1;
    }
}

//Facing direction
if xspeed &lt; 0 {
    image_xscale = -1;
}
if xspeed &gt; 0 {
    image_xscale = 1;
}

//Animation
if item &lt; 0 {   //Not carrying any item
    if image_index &gt;= 2 {
        image_index = 0;
    }
}
else {
    if item.sprite_width &gt; 8 { //Large items
        if image_index &gt;= 4 or image_index &lt; 2 {
            image_index = 2;
        }
    }
    else {  //Small items
        if image_index &gt;= 6 or image_index &lt; 4 {
            image_index = 4;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawSelf();
if (cfgDebug || debug_mode) and target &gt; -1 {
    with target {
        draw_set_colour(c_fuchsia);
        draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
