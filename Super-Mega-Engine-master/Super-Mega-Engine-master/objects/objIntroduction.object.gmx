<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The boss introduction screen object

playMusicNoLoopVolume(bgmIntroduction, 0.7);

totalLinesUp = 2;
lineUpY[0] = round(room_height/4)-21;
lineUpY[1] = round(room_height/2)-14;
createLineUp[0] = true; //If the line can spawn a new line (it's set to false once it creates a new line, to avoid endless clones)
createLineUp[1] = true;

totalLinesDown = 2;
lineDownY[0] = round(3*(room_height/4))-7;
lineDownY[1] = round(room_height/2)-14;
createLineDown[0] = true;
createLineDown[1] = true;

lineSpd = 8;

lineTimer = 0;

//Handles boss sprites and poses
//Add more bosses to the list once they are added
var boss = instance_create(0, 0, global.introductionBoss);
standSprite = boss.standSprite;
pose = boss.pose;
poseImgSpeed = boss.poseImgSpeed;
name = boss.name;
introBGCol = boss.introBGCol;
introLineCol = boss.introLineCol;
destinationLevel = boss.level;
with boss instance_destroy();

startPoseTimer = 0;
startPoseTimerMax = 65;
bossImg = 0; //The image index being used for the boss
bossSprite = standSprite; //The current sprite being used for the boss

bossRGB = 0; //Starts black, then fades towards white
bossRGBTimer = 0;
bossRGBTimerMax = 9;

bossTextTimer = 0;
bossTextTimerMax = 110;
bossTextIntervalTimer = 0;
bossTextInterval = 7; //The amount of frames between letters showing up
bossTextPos = 0;
bossDisplayName = "";

alarm[0] = 450; //Going to the level
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to level
var ID = instance_create(0, 0, objFadeout);
ID.type = "room";
ID.myRoom = destinationLevel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving the lines
var i;

lineTimer++;
for(i = 0; i &lt; totalLinesUp; i += 1)
{
    if lineTimer % 4 == 0 {
        lineUpY[i] -= lineSpd;
    }
    
    if lineUpY[i] &lt; -28 &amp;&amp; createLineUp[i] == true
    {
        totalLinesUp += 1;
        lineUpY[totalLinesUp-1] = round(room_height/2) - 14;
        createLineUp[totalLinesUp-1] = true;
        
        createLineUp[i] = false;
    }
}

for(i = 0; i &lt; totalLinesDown; i += 1)
{
    if lineTimer % 4 == 0 {
        lineDownY[i] += lineSpd;
    }
    
    if lineDownY[i] &gt; room_height &amp;&amp; createLineDown[i] == true
    {
        totalLinesDown += 1;
        lineDownY[totalLinesDown-1] = round(room_height/2) - 14;
        createLineDown[totalLinesDown-1] = true;
        
        createLineDown[i] = false;
    }
}


//Boss animation
if startPoseTimer &lt; startPoseTimerMax
{
    bossSprite = standSprite;
    startPoseTimer += 1;
}
else
{
    bossSprite = pose;
    bossImg += poseImgSpeed;
    if bossImg &gt;= sprite_get_number(pose)-1
    {
        bossImg = sprite_get_number(pose)-1;
    }
}


//Fading the boss in (it's black at the beginning, then starts gaining its own color)
if bossRGB &lt; 255
{
    bossRGBTimer += 1;
    if bossRGBTimer &gt;= bossRGBTimerMax
    {
        bossRGBTimer = 0;
        bossRGB += ceil(255/4);
        if bossRGB &gt; 255
            bossRGB = 255;
    }
}


//Boss text
if bossTextTimer &lt; bossTextTimerMax
{
    bossTextTimer += 1;
}
else
{
    if bossTextPos &lt; string_length(name)
    {
        bossTextIntervalTimer += 1;
        if bossTextIntervalTimer &gt;= bossTextInterval
        {
            bossTextIntervalTimer = 0;
            bossTextPos += 1;
            bossDisplayName = string_copy(name, 0, bossTextPos);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The background
draw_sprite_ext(sprIntroBG, 0, 0, 0, 1, 1, 0, introBGCol, 1);

//The moving colored lines
var i;
for(i = 0; i &lt; totalLinesUp; i += 1)
{
    draw_sprite_ext(sprIntroLines, 0, 0, lineUpY[i], 1, 1, 0, introLineCol, 1);
}

for(i = 0; i &lt; totalLinesDown; i += 1)
{
    draw_sprite_ext(sprIntroLines, 0, 0, lineDownY[i], 1, 1, 0, introLineCol, 1);
}

//The moving white lines
for(i = 0; i &lt; totalLinesUp; i += 1)
{
    draw_sprite(sprIntroWhiteLines, 0, 0, lineUpY[i]);
}

for(i = 0; i &lt; totalLinesDown; i += 1)
{
    draw_sprite(sprIntroWhiteLines, 0, 0, lineDownY[i]);
}

//The panel the Robot Master stands in
draw_sprite(sprIntroPanel, 0, 0, 0);

//The Robot Master
draw_sprite_ext(bossSprite, floor(bossImg), round(room_width/2), round(room_height/2)-4, -1, 1, 0, make_color_rgb(bossRGB, bossRGB, bossRGB), 1);

//The text displaying the name of the Robot Master
draw_set_font(global.MM3font);
draw_set_halign(fa_left);
var oldCol;
oldCol = draw_get_color();
draw_set_color(c_white);

draw_text(round(room_width/2) - round(string_width(name)/2), 136, bossDisplayName);

draw_set_color(oldCol);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
