<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var max_saves = 10;

var map;

for (var i = 0; i &lt; max_saves; i++) {
    map = ds_map_secure_load("save" + string(i) + ".dat");
    saves[i] = map;
}

num_saves = array_length_1d(saves);

selected = 0;

map = saves[selected];
if map &gt; -1 {
    setPlayer(map[? "character"]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objFadeout)) exit;

if global.keyUpPressed or global.keyLeftPressed {
    selected--;
    if selected &lt; 0 {
        selected = num_saves;
    }
    playSFX(sfxMenuMove);
    if selected &lt; num_saves and saves[selected] &gt; -1 {
        var map = saves[selected];
        setPlayer(map[? "character"]);
    }
}
else if global.keyDownPressed or global.keyRightPressed or global.keySelectPressed {
    selected++;
    if selected &gt; num_saves {
        selected = 0;
    }
    playSFX(sfxMenuMove);
    if selected &lt; num_saves and saves[selected] &gt; -1 {
        var map = saves[selected];
        setPlayer(map[? "character"]);
    }
}
else if global.keyPausePressed || global.keyJumpPressed || global.keyShootPressed {
 
    if selected &lt; num_saves &amp;&amp; saves[selected] == -1 {  //Empty Slot?
        playSFX(sfxError);
    }
    else {
        playSFX(sfxMenuSelect);
        var ID = instance_create(0, 0, objFadeout);
        ID.type = "room";
        if selected == num_saves {  //Back?
            ID.myRoom = rmMainMenu;
        }
        else {
            loadGame(selected);
            global.lastSave = selected;
            ID.myRoom = rmStageSelect;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_top);
draw_set_font(global.font);
var margin = 30;
var top = 30;

for (var i = 0; i &lt; num_saves; i++) {
    if selected == i {
        draw_set_colour(c_white);
        drawSave(i, saves[i], selected == i);
        draw_sprite(sprPassCursor, 0, margin + 1 + i * 16, top);
    }
    else {
        draw_set_colour(c_gray);
    }
    draw_set_halign(fa_left);
    draw_text(margin + 3 + i * 16, top + 3, string(i));
}

if selected == num_saves {
    draw_set_colour(c_white);
}
else {
    draw_set_colour(c_gray);
}

//draw_set_halign(fa_center);
//draw_text(room_width / 2, room_height - 40, "BACK");

draw_set_halign(fa_right);
draw_text(room_width - margin, top + 3, "BACK");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
