<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM2Conveyor</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMovingPlatformSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code:
//dir = 1/-1 (1 = right (default), -1 = left; optional)
//size = 1/2/3/etc (the size of the conveyor belt, measured in blocks of 16x16 pixels; optional, default is 1)

event_inherited();

respawn = true;
neverDespawn = true;

dir = 1;
    
size = 1;
    
spd = 1; //The speed the player moves at when standing on the conveyor belt
image_speed = 0;

arrowImg = 4;
midImg = 0;
arrowTimer = 0;
midTimer = 0;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The player could clip through the right side of the conveyor belt when moving left and when the coneveyor belt's direction was also left
//This code fixes that
if dir == -1
{
    with instance_create(x+size*16-15, y, objSolid)
        visible = false;
}

image_xscale = size;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen and !dead {
    xspeed = dir * spd;
    
    x -= xspeed * update_rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if size &gt;= 3 {
    for(var i = 0; i &lt; size; i++) {
        if i == 0
            draw_sprite(sprMM2Conveyor, arrowImg, round(x), round(y));
        else if i == size-1
            draw_sprite(sprMM2Conveyor, arrowImg, round(x)+i*16, round(y));
        else
            draw_sprite(sprMM2Conveyor, midImg, round(x)+i*16, round(y));
    }
    
    if !global.frozen {
        // Animation //
        
        //Arrows
        arrowTimer += update_rate;
        if arrowTimer &gt;= 13 {
            arrowTimer = 0;
            if arrowImg == 4 {
                if dir == 1
                    arrowImg = 3;
                else
                    arrowImg = 2;
            }
            else
                arrowImg = 4;
        }
        
        //Middle
        midTimer += update_rate;
        if midTimer &gt;= 5 {
            midTimer = 0;
            if midImg == 0
                midImg = 1;
            else
                midImg = 0;
        }
    }
    else {
        if instance_exists(objSectionSwitcher) {
            arrowImg = 4;
            midImg = 0;
        }
    }
}
else {
    for(var i = 0; i &lt; size; i++) {
        draw_sprite(sprMM2Conveyor, midImg, round(x)+i*16, round(y));
    }
    
    if !global.froze {
        // Animation //
        
        //Middle
        midTimer += update_rate;
        if midTimer &gt;= 5 {
            midTimer = 0;
            if midImg == 0
                midImg = 1;
            else
                midImg = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
