<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blackAlpha = 0;
blackAlphaIncrease = 0.2;
blackAlphaTimer = 0;
blackAlphaTimerMax = 2;
weapons_per_col = global.weapons_per_col;

phase = 0;  //0: increasing the black rectangle's alpha
option = global.currentWeapon;
oldWeapon = global.weapon;
resetWeapon = false; //Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened? 

primedItemIndex = -1;

with prtPlayer event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch phase {
    case 0: //Fading in
        blackAlphaTimer++;
        if blackAlphaTimer &gt;= blackAlphaTimerMax {
            blackAlphaTimer = 0;
            blackAlpha += blackAlphaIncrease;
            if blackAlpha &gt;= 1
                phase = 1;
        }
    break;
    
    case 1: //Fading out
        event_user(0); //Moving the selection
            
        blackAlphaTimer++;
        if blackAlphaTimer &gt;= blackAlphaTimerMax {
            blackAlphaTimer = 0;
            blackAlpha -= blackAlphaIncrease;
            if blackAlpha &lt;= 0
                phase = 2;
        }
    break;
    
    case 2: //Idle
        event_user(0); //Moving the selection
            
        
        //Select the weapon/tank
        if global.keyJumpPressed || global.keyPausePressed || global.keyShootPressed {
            if option &lt; global.totalWeapons {   //Selected a weapon             
                global.currentWeapon = option;
                with prtPlayerProjectile if ((destroyOnSwitch and other.oldWeapon != other.option) or destroyOnPause) instance_destroy();
                with objReflectedProjectile instance_destroy();
                with prtRush instance_destroy();
                with objRushJet instance_destroy(); //Could not be parented to prtRush since it's parented to prtMovingPlatformSolid
                with prtPlayer {
                    if onRushJet {
                        onRushJet = false;
                        canMove = true;
                    }
                }
                
                // If an item hasn't been primed for use, transition to phase 3.
                if (primedItemIndex == -1) {
                    if global.currentWeapon != oldWeapon {
                        with global.weapons[global.currentWeapon] event_user(0);
                    }
                    playSFX(sfxMenuSelect);
                    phase = 3;
                }
                // Otherwise, transition to phase 5.
                else {
                    global.items[primedItemIndex].using = true;
                    global.items[primedItemIndex].useOnIndex = option;
                    option = 99;
                    phase = 5;
                }
            }
            else {  //Selected an item
                item_index = option - global.totalWeapons;
                
                // If the item selected was already primed, unprime it.
                if (item_index == primedItemIndex) {
                    with global.items[item_index] event_user(3);    //Unprime item.
                    primedItemIndex = -1;
                }
                else if (primedItemIndex == -1) {                    
                    with global.items[item_index] event_user(0);    //Activate item
                    if global.items[item_index].ok {
                        // If this flag is true, it means that this item will need to be used on a weapon/util.
                        if (global.items[item_index].useOnWeapon) {
                            global.currentWeapon = global.defaultWeapon.ID;
                            primedItemIndex = item_index;
                            option = 0;
                        }
                        else {
                            option = 99;
                            phase = 5;
                            primedItemIndex = -1;
                        }
                    }
                }
                else {
                    playSFX(sfxError);
                }
            }
        }
    break;
    
    case 3: //Fading out
        blackAlphaTimer++;
        if blackAlphaTimer &gt;= blackAlphaTimerMax {
            blackAlphaTimer = 0;
            blackAlpha += blackAlphaIncrease;
            if blackAlpha &gt;= 1 {
                phase = 4;
                if resetWeapon {
                    global.weapon = oldWeapon;
                    with prtPlayer event_user(0);
                }
            }
        }
    break;
    
    case 4: //Fading in
        blackAlphaTimer++;
        if blackAlphaTimer &gt;= blackAlphaTimerMax {
            blackAlphaTimer = 0;
            blackAlpha -= blackAlphaIncrease;
            if blackAlpha &lt;= 0 {
                global.frozen = false;
                instance_destroy();
            }
        }
    break;
    
    case 5: //Using item
        if !global.items[item_index].using {
            phase = 2;
            option = oldWeapon;
            global.weapon = oldWeapon;
            primedItemIndex = -1;
            with prtPlayer event_user(0);
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor Movement
if global.keyDownPressed {
    playSFX(sfxMenuMove);
    
    var loops = 0; //How many times the while-loop has been passed through
    //show_debug_message("Going down from " + string(option));
    
    while (option &lt; global.totalWeapons &amp;&amp; !global.weapons[option].unlocked) || loops == 0 || (option &gt;= global.totalWeapons &amp;&amp; (!global.items[option-global.totalWeapons].usable || !global.items[option-global.totalWeapons].showPause || (global.items[option-global.totalWeapons].count == 0 and !global.items[option-global.totalWeapons].showZero))) {
        if option &gt; global.totalWeapons {
            option = 0;
        }
        //The bottom of the left column and the right column;
        //when the bottom of the left column is selected and we press down, we want to select the first item
        //for the right column, we want to select the last item
        else if option != weapons_per_col-1 &amp;&amp; option != global.totalWeapons - 1 {
            option++;
            if option &lt; 0
                option = global.totalWeapons - 1;
            else if option &gt; global.totalWeapons+array_length_1d(global.items) - 1
                option = 0;
        }
        else if option == weapons_per_col-1 //The bottom of the left column
        {
            option = global.totalWeapons; //First item
        }
        else //The bottom of the right column
        {
            option = global.totalWeapons+array_length_1d(global.items)-1; //Last item
        }
            
        if option &lt; global.totalWeapons
        {
            global.weapon = option;
            with prtPlayer event_user(0);
        }
        
        loops++;
    }
}
else if global.keyUpPressed {
    playSFX(sfxMenuMove);
    
    var loops = 0;
    
    while (option &lt; global.totalWeapons &amp;&amp; global.weapons[option].unlocked == false) || loops == 0 || (option &gt;= global.totalWeapons &amp;&amp; (!global.items[option-global.totalWeapons].usable || !global.items[option-global.totalWeapons].showPause || (global.items[option-global.totalWeapons].count == 0 and !global.items[option-global.totalWeapons].showZero)))
    {
        if option == global.totalWeapons+array_length_1d(global.items)-1 //Last item
        {
            option = global.totalWeapons-1; //The bottom weapon of the right column
        }
        else if option &gt;= global.totalWeapons //Item
        {
            option = weapons_per_col-1; //The bottom weapon of the left column
        }
        else if option == weapons_per_col //The top weapon of the right column
        {
            option = global.totalWeapons+array_length_1d(global.items)-1; //Last item
        }
        else if option == 0 //The top weapon of the left column
        {
            option = global.totalWeapons; //First item
        }
        else
        {
            option -= 1;
            if option &lt; 0
                option = global.totalWeapons;
            else if option &gt; global.totalWeapons+array_length_1d(global.items)-1
                option = 0;
        }
            
        if option &lt; global.totalWeapons
        {
            global.weapon = option;
            with prtPlayer event_user(0);
        }
        
        loops++;
    }
}

if global.keyLeftPressed || global.keyRightPressed
{
    if global.totalWeapons &gt; weapons_per_col //If there is a right column of weapons
    &amp;&amp; option &lt; global.totalWeapons          //And an item is not selected
    {
        if option &gt; weapons_per_col-1
            option -= weapons_per_col;
        else
            option += weapons_per_col;
            
        if option &gt; global.totalWeapons-1
            option = global.totalWeapons-1;
        else if option &lt; 0
            option = 0;
            
        playSFX(sfxMenuMove);
    }
    
    //Items
    if option &gt;= global.totalWeapons {
        if global.keyLeftPressed {
            option--;
            if option &lt; global.totalWeapons
                option = global.totalWeapons+array_length_1d(global.items)-1; //Last item
        }
        if global.keyRightPressed {
            option++;
            if option &gt; global.totalWeapons+array_length_1d(global.items)-1
                option = global.totalWeapons; //First item
        }

            
        playSFX(sfxMenuMove);
    }
    
    
    while (option &lt; global.totalWeapons &amp;&amp; global.weapons[option].unlocked == false) || option &gt; global.totalWeapons+array_length_1d(global.items)-1  || (option &gt;= global.totalWeapons &amp;&amp; (!global.items[option-global.totalWeapons].usable || !global.items[option-global.totalWeapons].showPause || (global.items[option-global.totalWeapons].count == 0 and !global.items[option-global.totalWeapons].showZero)))
    {
        if option == weapons_per_col
            option = global.totalWeapons-1;
        else if option == 0
        {
            if global.totalWeapons &gt; weapons_per_col
                option = weapons_per_col-1;
            else
                option = global.totalWeapons-1;
        }
        else if option &gt; global.totalWeapons+array_length_1d(global.items)-1
            option = global.totalWeapons; //First item
        else if global.keyLeftPressed {
            if option == global.totalWeapons
                option = global.totalWeapons+array_length_1d(global.items)-1
            else
                option -= 1;
        }
        else if global.keyRightPressed   
            option += 1;
    }
    
    if option &lt; global.totalWeapons {
        global.weapon = option;
        with prtPlayer event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var oldCol, oldAlp;
oldCol = draw_get_color();
oldAlp = draw_get_alpha();

var weapons_height = 139;
var icon_size = 16;
var spacing = max(0, floor((weapons_height - ceil(global.totalWeapons / 2) * icon_size) / (ceil(global.totalWeapons / 2) + 1)));
var iniY = 17 + spacing;

//Menu
if (phase &gt;= 1 &amp;&amp; phase &lt;= 3) || phase == 5 || phase == 6
{
    draw_set_font(global.font);
    
    //BG
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_sprite(sprPauseMenuNew, 0, view_xview[0], view_yview[0]);
    

    //Life
    var xx, yy, bgCol, i;
    bgCol = make_color_rgb(5, 5, 5);
    xx = view_xview[0]+200;
    yy = view_yview[0]+180;
    /*draw_sprite_ext(sprLife, 0, xx, yy, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprLifePrimary, 0, xx, yy, 1, 1, 0, global.primaryCol, 1);
    draw_sprite_ext(sprLifeSecondary, 0, xx, yy, 1, 1, 0, global.secondaryCol, 1);
    draw_sprite_ext(sprLifeOutline, 0, xx, yy, 1, 1, 0, bgCol, 1);*/
    draw_text(xx + (41-24), yy + (201-205), "0" + string(global._lives));
    
    //Screws
    if global.enableScrews {
        xx = view_xview[0]+192;
        yy = view_yview[0]+199;
        draw_sprite(sprScrewBig, 0, xx - 2, yy);
        draw_text(xx + (41-24), yy + (201-194), string_replace_all(string_format(global.screws, 3, 0), " ", "0"));
    }
    
    //Player
    xx = view_xview[0]+194;
    yy = view_yview[0]+172;

    drawSpriteColorSwap(prtPlayer.spriteStand, 0, xx, yy, global.charPrimaryColor, global.charSecondaryColor, make_colour_rgb(1.0, 1.0, 1.0),global.primaryCol,global.secondaryCol, global.outlineCol);
            
    //Weapons
    currX = 32;
    currY = iniY;
    for(i = 0; i &lt; global.totalWeapons; i++) {
        if i &gt;= global.char_weapons_per_col &amp;&amp; currX == 32 {
            currX = 144;
            currY = iniY;
        }
        if global.weapons[i].unlocked {
            //Icon
            if option == i {
                draw_sprite_ext(sprWeaponIconsColor, global.weapons[i].ID, view_xview[0]+currX, view_yview[0]+currY, 1, 1, 0, c_white, 1);
                /*shader_set(shBlueish);
                draw_sprite_ext(sprWeaponIconsColor, global.weaponSlot[i], view_xview[0]+currX, view_yview[0]+currY, 1, 1, 0, c_white, 1);
                shader_reset();*/
                
                // If using something like an W-Tank, draw the arrow as an indicator.
                if primedItemIndex != -1
                    draw_sprite_ext(sprPassArrow, 0, view_xview[0]+currX-6, view_yview[0]+currY+8, 1, 1, 0, c_white, 1);
            }
            else {
                shader_set(shGrayscale);
                draw_sprite_ext(sprWeaponIconsColor, global.weapons[i].ID, view_xview[0]+currX, view_yview[0]+currY, 1, 1, 0, c_white, 1);
                shader_reset();
            }    
            //Ammo bar
            var ammo;
            if i == 0
                ammo = global._health;
            else
                ammo = ceil(global.weapons[i].ammo);
                
            if option == i
                draw_sprite_ext(sprPauseMenuBar, ammo, view_xview[0]+currX+32, view_yview[0]+currY+8, 1, 1, 0, c_white, 1);
            else {
                //draw_sprite_ext(sprPauseMenuBarGray, ammo, view_xview[0]+currX+32, view_yview[0]+currY+8, 1, 1, 0, c_white, 1);
                shader_set(shGrayscale);
                draw_sprite_ext(sprPauseMenuBar, ammo, view_xview[0]+currX+32, view_yview[0]+currY+8, 1, 1, 0, c_white, 1);
                shader_reset();
            }                
            //Name
            draw_set_font(global.font);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
            
            if option == i
            {
                draw_set_color(make_color_rgb(255, 217, 162)); //Light yellow-ish
                draw_text(view_xview[0]+currX+16+10, view_yview[0]+currY+1, global.weapons[i].abbrev);
                draw_set_color(c_white);
            }
            else
                draw_text(view_xview[0]+currX+16+10, view_yview[0]+currY+1, global.weapons[i].abbrev);
        }
        else if prtPlateEquip.weapon == global.weapons[i].object_index {
            var tempX = currX;
            for (var p = 0; object_exists(p); p++) {
                if object_get_parent(p) == prtPlateEquip {
                    if p.count &gt; 0 {
                        col = c_white;
                    }
                    else {
                        col = c_gray;
                    }
                    draw_sprite_ext(p.sprite_index, 0, view_xview[0]+tempX, view_yview[0]+currY, 1, 1, 0, col, 1); 
                    tempX += p.sprite_width + 1;
                }
            }
        }
        currY += icon_size + spacing;
    }
  
    //Life bar
    //draw_sprite_ext(sprPauseMenuBarGray, global._health, view_xview[0]+182, view_yview[0]+192, 1, 1, 0, c_white, 1);
    shader_set(shGrayscale);
    draw_sprite_ext(sprPauseMenuBarGray, global._health, view_xview[0]+182, view_yview[0]+192, 1, 1, 0, c_white, 1);
    shader_reset();
  
    //Items
    currX = 16;
    currY = 164;
    for (var i = 0; i &lt; array_length_1d(global.items); i++) {
        if !global.items[i].showPause or (global.items[i].count == 0 and !global.items[i].showZero) {
            continue;
        }
        if !global.items[i].usable &amp;&amp; currY == 164 {
            currX = 16;
            currY = 191;
        }
        if option == global.totalWeapons + i || !global.items[i].usable || i == primedItemIndex {
            draw_sprite(global.items[i].sprite_index, 0, view_xview[0]+currX, view_yview[0]+currY);
        }
        else {
           //draw_sprite(global.items[i].sprite_index, 1, view_xview[0]+currX, view_yview[0]+currY);           
           shader_set(shGrayscale);
           draw_sprite(global.items[i].sprite_index, 0, view_xview[0]+currX, view_yview[0]+currY);           
           shader_reset();
        }
        
        if (global.items[i].showCount) {
            draw_text(view_xview[0]+currX, view_yview[0]+currY+17, "0" + string(global.items[i].count));
        }
        currX += 21;
    }
    
}


//Black rectangle
draw_set_color(c_black);
draw_set_alpha(blackAlpha);
draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], false);


draw_set_color(oldCol);
draw_set_alpha(oldAlp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
