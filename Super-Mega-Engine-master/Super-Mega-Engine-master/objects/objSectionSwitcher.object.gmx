<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>door = false;

global.frozen = true;
global.switchingSections = true;

with prtEnemy beenOutsideView = true;
with prtPlayerProjectile if destroyOnScroll instance_destroy();

with prtRush instance_destroy();
with objRushJet instance_destroy();

with prtPlayer {
    if onRushJet {
        onRushJet = false;
        canMove = true;
    }
}


with prtEnemyProjectile instance_destroy();
deactivateUnimportantObjects();

if instance_exists(prtPlayer)
{
    //Basically copy the player's appearance, so that the object can return to its original behaviour when done switching sections
    with prtPlayer visible = false;
    sprite_index = prtPlayer.sprite_index;
    image_index = prtPlayer.image_index;
    imgSpd = prtPlayer.image_speed;
    image_speed = imgSpd;
    image_xscale = prtPlayer.image_xscale;
    
    alarm[0] = 1;
}
else
{
    instance_destroy();
    global.frozen = false;
}



//Variables that can me modified to make switching sections faster/slower
screenSpeedHor = 4; //The speed that the screen will move at if travelling horizontally
playerSpeedHor = 0.4; //The speed that Mega Man will move at if travelling horizontally
screenSpeedVert = 4; //Same as above but if travelling vertically
playerSpeedVert = 0.4; //Same as above but if travelling vertically

playerSpeedHorDoor = 0.7; //The speed that Mega Man will move at if travelling horizontally through a door
playerSpeedVertDoor = 0.9; //The speed that Mega Man will move at if travelling vertically through a door


//Variables that cannot be modified
climbTimer = 0;
canProgressDoor = false;
canStep = false;
plt = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = imgSpd;
canProgressDoor = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if door {
    image_speed = 0;
    alarm[1] = ceil(4 / 0.15)
    with prtPlayer {
        if isHit {
            hitTimer = hitTime;
        }
    }
}
else
    image_speed = imgSpd;
    
canStep = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving the screen and player (or rather, both the player and the clone of the player. See create event for more information on that)

if canStep == true &amp;&amp; (playerSpeedHorDoor != 0 &amp;&amp; playerSpeedVertDoor != 0) //When the door is closing, we should not move
{
    if !(door == true &amp;&amp; canProgressDoor == false)
    {
        //Right
        if dir == "right"
        {
            view_xview[0] += screenSpeedHor;
            
            if door == false
            {
                x += playerSpeedHor;
                prtPlayer.x += playerSpeedHor;
            }
            else
            {
                x += playerSpeedHorDoor;
                prtPlayer.x += playerSpeedHorDoor;
            }
            
            if view_xview[0] &gt;= prtPlayer.sectionLeft
            {
                view_xview[0] = prtPlayer.sectionLeft;
                
                if door == false
                {
                    global.frozen = false;
                    prtPlayer.visible = true;
                    instance_destroy();
                    with prtPlayer playerDeactivateObjects();
                }
                else
                {
                    var bossdr;
                    bossdr = instance_place(prtPlayer.sectionLeft, y, objBossDoor);
                    if bossdr &gt;= 0
                    {
                        bossdr.opening = false;
                        bossdr.closing = true;
                        image_speed = 0;
                        playSFX(sfxDoor);
                        
                        playerSpeedHorDoor = 0;
                    }
                    else
                    {
                        global.frozen = false;
                        prtPlayer.visible = true;
                        instance_destroy();
                        with prtPlayer playerDeactivateObjects();
                    }
                }
            }
        }
        
        //Left
        else if dir == "left"
        {
            view_xview[0] -= screenSpeedHor;
            
            if door == false
            {
                x -= playerSpeedHor;
                prtPlayer.x -= playerSpeedHor;
            }
            else
            {
                x -= playerSpeedHorDoor;
                prtPlayer.x -= playerSpeedHorDoor;
            }
            
            if view_xview[0] &lt;= prtPlayer.sectionRight-view_wview[0]
            {
                view_xview[0] = prtPlayer.sectionRight-view_wview[0];
                
                if door == false
                {
                    global.frozen = false;
                    prtPlayer.visible = true;
                    instance_destroy();
                    with prtPlayer playerDeactivateObjects();
                }
                else
                {
                    var bossdr;
                    bossdr = instance_place(prtPlayer.sectionRight, y, objBossDoor);
                    if bossdr &gt;= 0
                    {
                        bossdr.opening = false;
                        bossdr.closing = true;
                        image_speed = 0;
                        playSFX(sfxDoor);
                        
                        playerSpeedHorDoor = 0;
                    }
                    else
                    {
                        global.frozen = false;
                        prtPlayer.visible = true;
                        instance_destroy();
                        with prtPlayer playerDeactivateObjects();
                    }
                }
            }
        }
        
        //Down
        else if dir == "down"
        {
            view_yview[0] += screenSpeedVert;
            
            if door == false
            {
                y += playerSpeedVert;
                prtPlayer.y += playerSpeedVert;
            }
            else
            {
                y += playerSpeedVertDoor;
                prtPlayer.y += playerSpeedVertDoor;
            }            
            
            if view_yview[0] &gt;= prtPlayer.sectionTop
            {
                view_yview[0] = prtPlayer.sectionTop;
                
                if door == false
                {
                    global.frozen = false;
                    prtPlayer.visible = true;
                    instance_destroy();
                    with prtPlayer playerDeactivateObjects();
                    instance_activate_object(prtEnemy); //To not make it invisible for 1 frame after re-entering the section
                }
                else
                {
                    var bossdr;
                    bossdr = instance_place(x, prtPlayer.sectionTop, objBossDoorH);
                    if bossdr &gt;= 0
                    {
                        bossdr.opening = false;
                        bossdr.closing = true;
                        image_speed = 0;
                        playSFX(sfxDoor);
                        
                        playerSpeedVertDoor = 0;
                    }
                    else
                    {
                        global.frozen = false;
                        prtPlayer.visible = true;
                        instance_destroy();
                        with prtPlayer playerDeactivateObjects();
                    }
                }                
            }
            
                        
        }
        
        //Up
        else if dir == "up"
        {
            view_yview[0] -= screenSpeedVert;            
            
            if door == false
            {
                y -= playerSpeedVert;
                prtPlayer.y -= playerSpeedVert;
            }
            else
            {
                y -= playerSpeedVertDoor;
                prtPlayer.y -= playerSpeedVertDoor;
            }            

            if view_yview[0] &lt;= prtPlayer.sectionBottom - view_hview[0]
            {
                view_yview[0] = prtPlayer.sectionBottom - view_hview[0];

                if door == false
                {
                    global.frozen = false;
                    prtPlayer.visible = true;
                    instance_destroy();
                    with prtPlayer playerDeactivateObjects();
                }
                else
                {
                    var bossdr;
                    bossdr = instance_place(x, prtPlayer.sectionBottom, objBossDoorH);
                    if bossdr &gt;= 0
                    {
                        bossdr.opening = false;
                        bossdr.closing = true;
                        image_speed = 0;
                        playSFX(sfxDoor);
                        
                        playerSpeedVertDoor = 0;
                    }
                    else
                    {
                        global.frozen = false;
                        prtPlayer.visible = true;
                        instance_destroy();
                        with prtPlayer playerDeactivateObjects();
                    }
                }                                        
            }
            
            
        }
        
        //Climbing animation
        if sprite_index == prtPlayer.spriteClimb
        {
            climbTimer += 1;
            if climbTimer &gt;= 8
            {
                image_xscale = -image_xscale;
                with prtPlayer image_xscale = -image_xscale;
                climbTimer = 0;
            }
        }
    }
}


//Quick weapon switching
with prtPlayer playerSwitchWeapons();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(prtPlayer) {
    drawPlayer();
    
    //Weapon icon (when using quick weapon switching)
    if prtPlayer.drawWeaponIcon {
        if !prtPlayer.climbing
            draw_sprite_ext(sprWeaponIconsColor, global.weapons[global.weapon].ID, round(prtPlayer.x-8) + prtPlayer.image_xscale, round(prtPlayer.y-30), 1, 1, 0, c_white, 1);
        else
            draw_sprite_ext(sprWeaponIconsColor, global.weapons[global.weapon].ID, round(prtPlayer.x-8), round(prtPlayer.y-30), 1, 1, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
