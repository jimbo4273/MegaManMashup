<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.MM3font);
draw_set_colour(c_white);
option = 0;

objLifeEquip.count = global._lives;

cursorCounter = 0;
cursorSprite = 0;
autoImg = 0;
megaImg = 0;

var bg = asset_get_index("bg" + global.sprName + "Shop");
if (bg == -1) bg = bgShop;
background_index[0] = bg;

var bgm = asset_get_index("bgm" + global.sprName + "Shop");
if (bgm == -1) bgm = bgmShop;
stopAllSFX();
playMusic(bgm);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objFadeout)) exit;

var total_items_ = array_length_1d(global.items);
var total_items = 0;
for (var i = 0; i &lt; total_items_; i++) {
    if global.items[i].buyable {
        total_items++;
    }
}
var items_per_row = ceil(total_items / 2);

autoImg += 0.1;
if autoImg &gt;= 2 {
    autoImg = 0;
}
if floor(megaImg) == 0 {
    megaImg += 1 / global.blinkTimerMax;
}
else {
    megaImg += 1 / global.blinkDuration;
}
if megaImg &gt;= 2 {
    megaImg = 0;
}
cursorCounter++;
if cursorCounter == 10 {
    cursorSprite = 1 - cursorSprite;
    cursorCounter = 0;
}

if global.keyRightPressed {
    option++;
    if option == items_per_row {
        option = 0;
    }
    else if option == total_items {
        option = items_per_row;
    }
    playSFX(sfxMenuMove);
}
if global.keyDownPressed {
    if option &lt; items_per_row || option == total_items {
        option += items_per_row;
        if option &gt; total_items {
            option = total_items;
        }
    }
    else {
        option = total_items;
    }
    playSFX(sfxMenuMove);
}
if global.keyLeftPressed {
    option--;
    if option == -1 {
        option = items_per_row - 1;
    }
    else if option == items_per_row - 1 {
        option = total_items - 1;
    }
    playSFX(sfxMenuMove);
}
if global.keyUpPressed {
    if option &gt;= items_per_row &amp;&amp; option &lt; total_items {
        option -= items_per_row;
    }
    else if option &lt; items_per_row {
        option = total_items;
    }
    else {
        option = 0;
    }
    playSFX(sfxMenuMove);
}
if option &gt; total_items {
    option = 0;
}
if option &lt; 0 {
    option = total_items;
}

if global.keyShootPressed || global.keyPausePressed {
    if option &lt; total_items {
        show_debug_message("Trying to buy item #" + string(item_index) + " / " + global.items[item_index].name);
        with global.items[item_index] {
            if count &lt; maxUnits &amp;&amp; global.screws &gt;= price {
                count++;
                global.screws -= price;
                event_user(1);
                playSFX(sfxMenuSelect);
                print("Buying " + name);
            }            
            else {
                print("Couldn't buy " + name);
                playSFX(sfxError);
            }
        }
    }
    else {
        playSFX(sfxMenuSelect);
        var ID = instance_create(0, 0, objFadeout);
        ID.type = "room";
        ID.myRoom = rmStageSelect;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Items
var total_items_ = array_length_1d(global.items);
var total_items = 0;
for (var i = 0; i &lt; total_items_; i++) {
    if global.items[i].buyable {
        total_items++;
    }
}
var items_per_row = ceil(total_items / 2);
var avail_width = 206;
var item_size = 24;
var spacing = ceil((avail_width - (item_size * items_per_row)) / (items_per_row + 1));
var spacingY = 30;
var iniX = 25 + spacing;
var iniY = 20;

currX = iniX;
currY = iniY;
total = 0;
item_index = -1;
for (var i = 0; i &lt; total_items_; i++) {
    if !global.items[i].buyable {
        continue;
    }
    if option == total {
        item_index = i;
    }
    total++;
    if total == items_per_row + 1 {
        currX = iniX;
        currY = iniY + spacingY;
    }
    if global.screws &gt;= global.items[i].price &amp;&amp; global.items[i].count &lt; global.items[i].maxUnits {
        draw_sprite(global.items[i].sprite_index, 0, currX + 2, currY);
    }
    else {
        shader_set(shGrayscale);
        draw_sprite(global.items[i].sprite_index, 0, currX + 2, currY);
        shader_reset();
    }
    draw_text(currX, currY+17, string_replace_all(string_format(global.items[i].price, 3, 0), " ", "0"));
    currX += spacing + item_size;
}

//Cursor
sX = 1;
sY = 1;
if option &lt; items_per_row { //First Row
    currX = option * (item_size + spacing) + iniX - 3;
    currY = iniY - 1;
}
else if option &lt; total_items {   //Second Row
    currX = (option - items_per_row) * (item_size + spacing) + iniX - 3;
    currY = iniY + spacingY - 1;
}
else {  //EXIT
    currX = 176 - 4;
    currY = 96 - 3;
    sX = 1.7;
    sY = 0.5;    
}
draw_sprite_ext(sprShopCursor, cursorSprite, currX, currY, sX, sY, 0, c_white, 1);


//Screws
draw_sprite(sprScrewBig, 0, 33, 99);
draw_text(56, 105, string_replace_all(string_format(global.screws, 3, 0), " ", "0"));

//Exit
draw_rectangle(175, 95, 214, 104, c_black);
draw_set_color(c_black);
draw_text(183, 96, "EXIT");
draw_set_color(c_white);


//Sprites
draw_sprite(sprAuto, autoImg, 40, 127);
draw_sprite_ext(global.spriteStand, megaImg, 198, 145, -1, 1, 0, c_white, 1);

if option &lt; total_items {
    //Item Name
    draw_text(8, 182, string_upper(global.items[item_index].name) + ": 0" + string(global.items[item_index].count) + " / MAX: 0" + string(global.items[item_index].maxUnits) );
    
    //Item Description
    draw_text_ext(8, 198, string_upper(global.items[item_index].description), 10, 240);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
