<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>option = 8; //Starting from the topleft, going clockwise; the middle panel is option 8
imgSpd = 0.1; //For the selected panel
imgIndex = 0; //For the selected panel
showShop = 0;
selected = false;

playMusicVolume(bgmStageSelect, 0.6);

if numBossesDefeated() == 8 {
    instance_create(0, 0, objFlash);
    playSFX(sfxThunder);
}

idx = 0;
oldOption = option;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oldOption = option;

if !selected {
    //Moving the selection
    var soundPlayed;
    soundPlayed = false; //Prevents the menu move sound from playing twice when two buttons are pressed at the same time
    if global.keyRightPressed {
        switch option {
            case 0: option = 1; break;
            case 1: option = 2; break;
            case 2: option = 0; break;
            case 3: option = 7; break;
            case 4: option = 6; break;
            case 5: option = 4; break;
            case 6: option = 5; break;
            case 7: option = 8; break;
            case 8: option = 3; break;
        }
        
        if !soundPlayed {
            playSFX(sfxMenuMove);
            soundPlayed = true;
        }
    }
    else if global.keyLeftPressed {
        switch option {
            case 0: option = 2; break;
            case 1: option = 0; break;
            case 2: option = 1; break;
            case 3: option = 8; break;
            case 4: option = 5; break;
            case 5: option = 6; break;
            case 6: option = 4; break;
            case 7: option = 3; break;
            case 8: option = 7; break;
        }
        
        if !soundPlayed {
            playSFX(sfxMenuMove);
            soundPlayed = true;
        }
    }
    
    if global.keyDownPressed {
        switch option {
            case 0: option = 7; break;
            case 1: option = 8; break;
            case 2: option = 3; break;
            case 3: option = 4; break;
            case 4: option = 2; break;
            case 5: option = 1; break;
            case 6: option = 0; break;
            case 7: option = 6; break;
            case 8: option = 5; break;
        }
        
        if !soundPlayed {
            playSFX(sfxMenuMove);
            soundPlayed = true;
        }
    }
    else if global.keyUpPressed {
        switch option {
            case 0: option = 6; break;
            case 1: option = 5; break;
            case 2: option = 4; break;
            case 3: option = 2; break;
            case 4: option = 3; break;
            case 5: option = 8; break;
            case 6: option = 7; break;
            case 7: option = 0; break;
            case 8: option = 1; break;
        }
        
        if !soundPlayed {
            playSFX(sfxMenuMove);
            soundPlayed = true;
        }
    }
    
    //Going to the shop
    if global.enableScrews &amp;&amp; global.keySelectPressed {
        var ID = instance_create(0, 0, objFadeout);
        ID.type = "room";
        ID.myRoom = rmShop;
    }
    
    //Selecting a stage
    if (global.keyPausePressed || global.keyJumpPressed || global.keyShootPressed) &amp;&amp; option &lt; 9 {
        if option &lt; 8 || numBossesDefeated() == 8 {
            playSFX(sfxMenuSelect);
        }
        
        if option &lt; 8 {
            if object_get_parent(global.bosses[option]) == prtBoss {
                var boss = instance_create(0, 0, global.bosses[option]);
                selected = true;
                global.introductionBoss = global.bosses[option];
                
                var ID = instance_create(0, 0, objFadeout);
                ID.type = "room";
                    
                if !global.bossDefeated[option]
                    ID.myRoom = rmIntroduction;
                else
                    ID.myRoom = boss.level;
                with boss instance_destroy();
            }
            
        }
        else {
            if numBossesDefeated() &gt;= 8 {
                selected = true;
                
                if global.fortressStarted
                    global.destinationLevel = rmFortress;
                else
                    global.destinationLevel = rmWilyIntro;
                
                var ID = instance_create(0, 0, objFadeout);
                ID.type = "room";
                ID.myRoom = global.destinationLevel;               
            }
        }
    }
}


//Animation
imgIndex += imgSpd;
showShop += imgSpd / 3;
if imgIndex &gt;= 2
    imgIndex -= 2;
if showShop &gt;= 3
    showShop -= 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Register the X and Y coordinates of all panels
var i;
for(i = 0; i &lt;= 8; i++) {
    switch i {
        case 0: xx[i] = 24; yy[i] = 24; break;
        case 1: xx[i] = 104; yy[i] = 24; break;
        case 2: xx[i] = 184; yy[i] = 24; break;
        case 3: xx[i] = 184; yy[i] = 88; break;
        case 4: xx[i] = 184; yy[i] = 152; break;
        case 5: xx[i] = 104; yy[i] = 152; break;
        case 6: xx[i] = 24; yy[i] = 152; break;
        case 7: xx[i] = 24; yy[i] = 88; break;
        case 8: xx[i] = 104; yy[i] = 88; break;
    }
}


//Draw the selected panel
draw_sprite(sprStageSelectPanel, floor(imgIndex), xx[option], yy[option]);

draw_set_color(c_white);
draw_set_font(global.MM3font);
draw_set_valign(fa_top);
    
var words, word;

//Draw the boss icons and names
for(i = 0; i &lt; 8; i++) {
    if !global.bossDefeated[i]
        draw_sprite(sprStageSelectIcons, i, xx[i]+8, yy[i]+8);

    //Boss name
    if is_string(global.bossNames[i]) and global.bossNames[i] != "" {
        words = split(global.bossNames[i], " ");
        word = ds_queue_dequeue(words);
        if string_length(word) &lt;= 6 {
            draw_set_halign(fa_left);
            draw_text(xx[i], yy[i] + 48, word);
        }
        else {
            draw_set_halign(fa_right);        
            draw_text(xx[i] + 48, yy[i] + 48, word);
        }
        if (ds_queue_size(words) &gt; 0) {
            draw_set_halign(fa_right);
            word = ds_queue_dequeue(words);
            draw_text(xx[i] + 48, yy[i] + 56, word);
        }
    }
}

ds_queue_destroy(words);

if numBossesDefeated() &lt; 8 {
    //Draw MM's head in the middle
    if global.stageSelectFollow {
        idx = option;
    }
    else {
        if oldOption != option or idx &gt; 0 {
            idx += 0.3;
            if (idx &gt;= 4) idx = 0;
        }
    }
    draw_sprite(global.spriteStageSelect, idx, xx[8]+8, yy[8]+8);
}
else {
    //Draw Dr. Wily's logo
     draw_sprite(sprStageSelectIcons, 8, xx[8]+8, yy[8]+8);
    
}

if global.enableScrews &amp;&amp; showShop &gt;= 1 {
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    var posx = view_wview[0] / 2;
    var posy = yy[8] + 52;
    if global.GP == -1 {
        draw_text(posx, posy, "SHIFT] SHOP");
    }
    else {
        draw_text(posx, posy, "SELECT] SHOP");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
