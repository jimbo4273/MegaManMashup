<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = "";
phrase = "";
phrases = ds_queue_create();
delay = 4;
pos = -1;
line_spacing = 8;
arrow_delay = 0;   //0 = no arrow
allow_fast_forward = true;
allow_jump_to_end = true;
allow_manual_page_turn = true;
page_delay = room_speed * 2; //0 = no auto turn page
alarm[0] = 1;
instance_deactivate_object(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_queue_size(phrases) &gt; 0 {
    phrase = ds_queue_dequeue(phrases);
    pos = -1;
    alarm[1] = delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[2] = arrow_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pos++;
if pos &lt; string_length(phrase) {
    alarm[1] = delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize
phrases = split(text, "&gt;");
phrase = ds_queue_dequeue(phrases);
alarm[1] = delay;
alarm[2] = arrow_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if is_string(phrase) {
    if alarm[3] &lt;= 0 &amp;&amp; pos &gt;= string_length(phrase) - 1 {
        alarm[3] = page_delay;
    }
    if allow_fast_forward &amp;&amp; alarm[1] &gt; 0 &amp;&amp; pos &lt; string_length(phrase) - 1 &amp;&amp; (global.keyJump || global.keyShoot || keyboard_check(vk_pagedown)) {
        pos++;
    }
    else if allow_manual_page_turn &amp;&amp; pos &gt;= string_length(phrase) - 1 &amp;&amp; ds_queue_size(phrases) &gt; 0 &amp;&amp; (global.keyJumpPressed || global.keyShootPressed || keyboard_check_pressed(vk_pagedown) || global.keyPausePressed || keyboard_check_pressed(vk_end)) {
        phrase = ds_queue_dequeue(phrases);
        pos = -1;
        alarm[1] = delay;
    }
    else if delay == 0 || (allow_jump_to_end &amp;&amp; alarm[1] &gt; 0 &amp;&amp; pos &lt; string_length(phrase) - 1 &amp;&amp; (global.keyPausePressed || keyboard_check_pressed(vk_end))) {
        pos = string_length(phrase) - 1;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if is_string(phrase) {
    var txt = string_upper(string_copy(phrase, 0, pos + 1));// + string_repeat("_", string_length(text) - pos - 1);
    draw_text_ext(x, y, txt, line_spacing, view_wview[0] - 2 * x);
    
    if alarm[2] &gt; arrow_delay / 2 &amp;&amp; pos &gt;= string_length(phrase) - 1 &amp;&amp; ds_queue_size(phrases) &gt; 0 {
        draw_sprite_ext(sprPassArrow, 0, view_xview[0] + view_wview[0] - 4, view_yview[0] + view_hview[0] - 1, 1, 1, -90, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
