<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen {
    radius = 0;
    activating = true;
    global.frozen = true;
    playSFX(sfxCentaurFlash);
}

destroyOnSwitch = false;
destroyOnPause = false;
destroyOnScroll = false;
doesNotCount = true;
defaultDamage = 1;  //While Time Slow doesn't inflict damage, only
defaultBossDamage = 0;  //vulnerable (damage &gt; 0) bosses are affected
reflectible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with prtEnemy {
    update_rate = 1;
}
with prtEnemyProjectile {
    update_rate = 1;
}
with prtGimmick {
    update_rate = 1;
}
with prtSolidGimmick {
    update_rate = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activating {
    radius += 8;
    global.frozen = true;    
}
if activating and radius &gt; 256 {
    activating = false;
    global.frozen = false;
    alarm[1] = room_speed * 5;
    
}

if !global.frozen {
    if instance_exists(prtPlayer) {
        x = sprite_get_xcenter_object(prtPlayer);
        y = sprite_get_ycenter_object(prtPlayer);
    }
    
    if alarm[1] &gt; 0 {
        with prtEnemy {
            if insideView() and damage[objTimeSlow] &gt; 0
                update_rate = 0.2;
        }
        with prtEnemyProjectile {
            if insideView()
                update_rate = 0.2;
        }
        with prtGimmick {
            if insideView()
                update_rate = 0.2;
        }
        with prtSolidGimmick {
            if insideView()
                update_rate = 0.2;
        }
    }
}
else if alarm[1] &gt; 0 {
    alarm[1]++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Just to cancel the parent event
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Just to cancel the parent event
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activating and instance_exists(prtPlayer) {
    draw_set_alpha(0.5);
    draw_set_color(c_purple);
    draw_circle(x, y, radius - 0.5, true);
    draw_circle(x, y, radius + 0.5, true);
    draw_set_color(c_fuchsia);
    draw_circle(x, y, radius, true);
    
    draw_set_color(c_purple);
    draw_circle(x, y, radius / 2 - 0.5, true);
    draw_circle(x, y, radius / 2 + 0.5, true);
    draw_set_color(c_fuchsia);
    draw_circle(x, y, radius / 2, true);
    
    draw_set_color(c_purple);
    draw_circle(x, y, radius / 4 - 0.5, true);
    draw_circle(x, y, radius / 4 + 0.5, true);
    draw_set_color(c_fuchsia);
    draw_circle(x, y, radius / 4, true);
    draw_set_alpha(1);
}

if alarm[1] &gt; 0 {
    draw_set_alpha(0.1);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false); 
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
