<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprYellowDevilBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>block_id = -1;
image_speed = 0;

enum block_states {MOVING, FIT, UNFIT, IDLE};

current_state = block_states.MOVING;

spd = 5;

col = 0;
row = 0;
xpos = 0;
ypos = 0;

delay = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UNFIT
current_state = block_states.UNFIT;

/// Throw next block
with objYellowDevilBlock {
    if block_id == other.block_id + 1 &amp;&amp; current_state == block_states.IDLE &amp;&amp; image_xscale == other.image_xscale {
        alarm[0] = room_speed * delay;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !global.frozen {
    switch current_state {
        case block_states.FIT:
            hspeed = 0;
            if image_index &gt;= 2 {
                image_index = 1.9;
            }
            else {
                image_index -= 0.1;
            }
            if image_index &lt;= 0 {
                image_index = 0;
                image_xscale *= -1;
                current_state = block_states.IDLE;
                //alarm[0] = room_speed * (19 * delay + 1); 
                mustOpen = true;
                with objYellowDevilBlock {
                    if current_state != block_states.IDLE {
                        other.mustOpen = false;
                    }
                }
                if mustOpen {
                    instance_activate_object(objYellowDevil);
                }                    
            }
        break;
        case block_states.UNFIT:
            image_index += 0.1;
            if image_index &gt;= 2 {
                current_state = block_states.MOVING;
            }
        break;
        case block_states.MOVING:
            image_index += 0.1;
            if image_index &gt;= 5 {
                image_index = 2;
            }
            hspeed = image_xscale * spd;
            if image_xscale == -1 &amp;&amp; x + sprite_xoffset &lt;= view_xview[0] + xpos {
                current_state = block_states.FIT;
                x = view_xview[0] + xpos - sprite_xoffset;
            }
            else if image_xscale == 1 &amp;&amp; x - sprite_xoffset + sprite_width &gt;= view_xview[0] + view_wview[0] - xpos {
                current_state = block_states.FIT;
                x = view_xview[0] + view_wview[0] - xpos + sprite_xoffset - sprite_width;
            }
        break;
        case block_states.IDLE:   
        break;
    }
}
else {
    if alarm[0] &gt; 0 {
        alarm[0]++;
    }
    if alarm[1] &gt; 0 {
        alarm[1]++;
    }
    hspeed = 0;
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prtPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alarm[1] == -1 {
    if current_state != block_states.IDLE {
        with other playerGetHit(4);
    }
    else {
        with other playerGetHit(8);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if current_state == block_states.IDLE {
    var left = col * 16 + 10;
    var top = row * 16;
    var width = 16;
    var height = 16;
    var x_ = x - 8;
    var y_ = y - 8;
    if col == 0 {   //First column is wider (foot)
        left = 0;
        width = 26;
        if image_xscale == 1 {
            x_ = x - 18;
        }
        else {
            x_ = x + 2;
        }
        if row == 1 {   //Col 0, row 1 is larger (shoulder)
            top -= 8;
            height += 8;
            y_ -= 8;
        }
    }
    if col == 1 &amp;&amp; row == 3 {   //Col 1 row 3 is larger (inner side of leg)
        height += 16;
    }
    if col == 3 &amp;&amp; row == 4 {   //Col 3 row 4 is wider (tip of front foot)
        width += 8;
    }
    if image_xscale == -1 {
        x_ += 16;
    }
    useShader = false;
    subimg = 0;
    if instance_exists(objYellowDevil) &amp;&amp; objYellowDevil.alarm[9] &gt; 1 {
        shader_set(shBossHit);
        useShader = true;
    }
    else if alarm[1] &gt; 0 {
        shader_set(shBossDefeated);
        useShader = true;
    }
    
    draw_sprite_part_ext(sprYellowDevil, subimg, left, top, width, height, x_, y_, image_xscale, 1, c_white, 1);
    if useShader {
        shader_reset();
    }
}
else {
    drawSelf();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
