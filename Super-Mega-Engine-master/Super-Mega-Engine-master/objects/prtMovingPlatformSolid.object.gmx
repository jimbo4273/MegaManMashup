<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtGimmick</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

xspeed = 0;
yspeed = 0;

prevPlayer = false;
neverDespawn = true;

keepOnSwitch = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//If transitioning on top of a moving platform, move the platform at the same speed as Mega Man
//Different conditions for browser or desktop, at least until this issue is better understood
if keepOnSwitch &amp;&amp; global.frozen &amp;&amp; !dead &amp;&amp; instance_exists(objSectionSwitcher) &amp;&amp; instance_exists(prtPlayer) &amp;&amp; ( (os_browser == browser_not_a_browser &amp;&amp; place_meeting(x, y-1, prtPlayer) ) || (os_browser != browser_not_a_browser &amp;&amp; place_meeting(x, bbox_top-1, prtPlayer) )) &amp;&amp; objSectionSwitcher.plt == self {
    x += objSectionSwitcher.playerSpeedHor * sign(xspeed);

    //Small hop workaround
    if os_browser == browser_not_a_browser
        y += objSectionSwitcher.playerSpeedVert * sign(yspeed);
    else
        y = prtPlayer.bbox_bottom + sprite_yoffset + 1 + objSectionSwitcher.playerSpeedVert;
}

if global.frozen == false &amp;&amp; dead == false
{
    //Top
    if collision_rectangle(bbox_left+1, bbox_top-1, bbox_right-1, bbox_top, prtPlayer, false, false)
    {
        if prtPlayer.bbox_bottom &lt;= bbox_top+abs(yspeed)
        {
            with prtPlayer
            {
                if !place_meeting(x + global.xspeed+other.xspeed + sign(global.xspeed+other.xspeed), y, objSolid)
                &amp;&amp; !((place_meeting(x, y + global.yspeed+other.yspeed + sign(global.yspeed+other.yspeed), objSolid) &amp;&amp; global.yspeed+other.yspeed &lt; 0)
                || (place_meeting(x, y + sign(global.yspeed+other.yspeed), objSolid) &amp;&amp; global.yspeed+other.yspeed &gt; 0)) //For some reason, checking the speed when moving down caused the player to let go of the moving platform one frame earlier than it should. For all other collisions, that system worked fine.
                {
                    x += other.xspeed * other.update_rate;
                    y += other.yspeed;// * other.update_rate;
                    ground = true;
                    
                    if climbing == true
                    {
                        climbing = false;
                        canMove = true;
                        canSpriteChange = true;
                        canGravity = true;
                        y = other.bbox_top - 16 + other.yspeed;
                        image_xscale = ladderXScale;
                    }
                    
                    y = other.bbox_top - 16 + other.yspeed;
                }
                else if place_meeting(x, y + global.yspeed+other.yspeed + sign(global.yspeed+other.yspeed), objSolid) &amp;&amp; global.yspeed+other.yspeed &lt; 0
                {
                    global._health = 0;
                }
            }
        }
        
        prevPlayer = true;
    }
    else if prevPlayer == true
    {
        if instance_exists(prtPlayer)
        {
            //When walking off the platform on the right when the platform is moving to the right (and the same goes for left),
            //the player spawned on top of the platform, which prevented them from walking off. This code fixes that
            if ((collision_rectangle(bbox_left+xspeed-1, bbox_top-1, bbox_left, bbox_bottom, prtPlayer, false, false) &amp;&amp; xspeed &lt; 0)
            || (collision_rectangle(bbox_right+xspeed+1, bbox_top-1, bbox_right, bbox_bottom, prtPlayer, false, false) &amp;&amp; xspeed &gt; 0))
            &amp;&amp; !collision_rectangle(prtPlayer.bbox_left, prtPlayer.bbox_bottom, prtPlayer.bbox_right, prtPlayer.bbox_bottom+1, objSolid, false, true)
            &amp;&amp; !collision_rectangle(prtPlayer.bbox_left, prtPlayer.bbox_bottom, prtPlayer.bbox_right, prtPlayer.bbox_bottom+1, objTopSolid, false, true)
            {
                with prtPlayer y += 1;
            }
            
            prevPlayer = false;
        }
    }
    
    //Right
    if collision_rectangle(bbox_right-1, bbox_top, bbox_right, bbox_bottom, prtPlayer, false, false) &amp;&amp; xspeed &gt; 0
    {
        if prtPlayer.bbox_left &gt;= bbox_right-abs(xspeed)
        {
            with prtPlayer
            {
                if !place_meeting(x + global.xspeed+other.xspeed + sign(global.xspeed+other.xspeed), y, objSolid)
                {
                    x += other.xspeed * other.update_rate;
                    
                    if climbing == true
                    {
                        climbing = false;
                        canMove = true;
                        canSpriteChange = true;
                        canGravity = true;
                        image_xscale = ladderXScale;
                    }
                    
                    while place_meeting(x, y, other.id)
                        x += 1;
                        
                    if other.xspeed &gt; global.xspeed
                        x -= global.xspeed;
                }
                else
                {
                    global._health = 0;
                }
            }
        }
    }
    
    //Left
    if collision_rectangle(bbox_left+1, bbox_top, bbox_left, bbox_bottom, prtPlayer, false, false) &amp;&amp; xspeed &lt; 0
    {
        if prtPlayer.bbox_right &lt;= bbox_left+abs(xspeed)
        {
            with prtPlayer
            {
                if !place_meeting(x + global.xspeed+other.xspeed + sign(global.xspeed+other.xspeed), y, objSolid)
                {
                    x += other.xspeed * other.update_rate;
                    
                    if climbing == true
                    {
                        climbing = false;
                        canMove = true;
                        canSpriteChange = true;
                        canGravity = true;
                        image_xscale = ladderXScale;
                    }
                    
                    while place_meeting(x, y, other.id)
                        x -= 1;
                        
                    if other.xspeed &lt; global.xspeed
                        x -= global.xspeed;
                }
                else
                {
                    global._health = 0;
                }
            }
        }
    }
    
    //Bottom
    if collision_rectangle(bbox_left+2, bbox_bottom+1, bbox_right-2, bbox_bottom, prtPlayer, false, false)
    {
        if prtPlayer.bbox_top &gt;= bbox_bottom-abs(yspeed)
        {
            with prtPlayer
            {
                if place_meeting(x, y + global.yspeed+other.yspeed + sign(global.yspeed+other.yspeed), objSolid) &amp;&amp; global.yspeed+other.yspeed &gt; 0
                {
                    global._health = 0;
                }
            }
        }
    }
    
    x += xspeed * update_rate;
    y += yspeed;// * update_rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawSelf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
